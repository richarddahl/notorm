"""
Unit tests for vector SQL emitters.

These tests ensure the SQL emitters for vector functionality
generate the correct SQL statements.
"""

import pytest
from unittest.mock import MagicMock, patch

from uno.sql.emitters.vector import (
    VectorSQLEmitter,
    VectorSearchEmitter,
    VectorBatchEmitter
)
from uno.sql.statement import SQLStatementType


@pytest.fixture
def mock_config():
    """Create a mock configuration."""
    config = MagicMock()
    config.DB_SCHEMA = "test_schema"
    config.DB_NAME = "test_db"
    return config


@pytest.fixture
def vector_sql_emitter(mock_config):
    """Create a VectorSQLEmitter with mock config."""
    return VectorSQLEmitter(config=mock_config)


@pytest.fixture
def vector_search_emitter():
    """Create a VectorSearchEmitter."""
    return VectorSearchEmitter()


@pytest.fixture
def vector_batch_emitter():
    """Create a VectorBatchEmitter."""
    return VectorBatchEmitter()


def test_vector_sql_emitter_basic(vector_sql_emitter):
    """Test basic SQL generation for vector extension setup."""
    # Generate SQL
    statements = vector_sql_emitter.generate_sql()
    
    # Check that we have statements
    assert len(statements) > 0
    
    # Check for critical SQL operations
    sql_text = " ".join([str(stmt.statement) for stmt in statements])
    
    # Should include creating the extension
    assert "CREATE EXTENSION IF NOT EXISTS pgvector" in sql_text
    
    # Should include creating helper functions
    assert "CREATE OR REPLACE FUNCTION" in sql_text
    
    # Should include granting permissions
    assert "GRANT" in sql_text


def test_vector_sql_emitter_statement_types(vector_sql_emitter):
    """Test statement types generated by the emitter."""
    # Generate SQL
    statements = vector_sql_emitter.generate_sql()
    
    # Check statement types
    statement_types = [stmt.statement_type for stmt in statements]
    
    # Should have extension creation
    assert SQLStatementType.EXTENSION in statement_types
    
    # Should have function creation
    assert SQLStatementType.FUNCTION in statement_types
    
    # Should have grants
    assert SQLStatementType.GRANT in statement_types


def test_vector_search_emitter_similarity_query(vector_search_emitter):
    """Test generating a similarity search query."""
    # Generate search SQL
    sql = vector_search_emitter.generate_similarity_search_sql(
        table_name="documents",
        embedding=[0.1] * 3,  # Simplified vector for testing
        limit=10,
        threshold=0.7,
        metric="cosine"
    )
    
    # Check the generated SQL
    assert "SELECT" in sql
    assert "documents" in sql
    assert "embedding" in sql
    assert "cosine" in sql
    assert "LIMIT 10" in sql
    assert "> 0.7" in sql


def test_vector_search_emitter_hybrid_query(vector_search_emitter):
    """Test generating a hybrid search query."""
    # Generate hybrid search SQL
    sql = vector_search_emitter.generate_hybrid_search_sql(
        table_name="documents",
        embedding=[0.1] * 3,  # Simplified vector for testing
        graph_depth=2,
        limit=10,
        threshold=0.7,
        metric="cosine"
    )
    
    # Check the generated SQL
    assert "SELECT" in sql
    assert "documents" in sql
    assert "embedding" in sql
    assert "cosine" in sql
    assert "LIMIT 10" in sql
    assert "> 0.7" in sql
    assert "graph" in sql.lower() or "path" in sql.lower()  # Hybrid should involve graph


def test_vector_search_emitter_with_filters(vector_search_emitter):
    """Test generating a search query with filters."""
    # Generate search SQL with filters
    filters = [
        ("type", "=", "article"),
        ("status", "=", "published")
    ]
    
    sql = vector_search_emitter.generate_similarity_search_sql(
        table_name="documents",
        embedding=[0.1] * 3,
        limit=10,
        threshold=0.7,
        metric="cosine",
        filters=filters
    )
    
    # Check the generated SQL
    assert "SELECT" in sql
    assert "documents" in sql
    assert "WHERE" in sql
    assert "type = " in sql
    assert "status = " in sql
    assert "AND" in sql


def test_vector_batch_emitter_update(vector_batch_emitter):
    """Test generating a batch update SQL statement."""
    # Generate batch update SQL
    sql = vector_batch_emitter.generate_batch_update_sql(
        table_name="documents",
        id_column="id",
        embedding_column="embedding",
        ids=["doc1", "doc2", "doc3"]
    )
    
    # Check the generated SQL
    assert "UPDATE" in sql
    assert "documents" in sql
    assert "SET" in sql
    assert "embedding" in sql
    assert "id" in sql
    assert "IN" in sql or "= ANY" in sql
    assert "doc1" in sql or "'doc1'" in sql


def test_vector_batch_emitter_select(vector_batch_emitter):
    """Test generating a batch select SQL statement."""
    # Generate batch select SQL
    sql = vector_batch_emitter.generate_batch_select_sql(
        table_name="documents",
        columns=["id", "title", "content"],
        id_column="id",
        ids=["doc1", "doc2", "doc3"]
    )
    
    # Check the generated SQL
    assert "SELECT" in sql
    assert "documents" in sql
    assert "id, title, content" in sql
    assert "WHERE" in sql
    assert "id" in sql
    assert "IN" in sql or "= ANY" in sql
    assert "doc1" in sql or "'doc1'" in sql


def test_vector_batch_emitter_content_select(vector_batch_emitter):
    """Test generating SQL to select content for vectorization."""
    # Generate content select SQL
    sql = vector_batch_emitter.generate_content_select_sql(
        table_name="documents",
        id_column="id",
        content_columns=["title", "content"]
    )
    
    # Check the generated SQL
    assert "SELECT" in sql
    assert "documents" in sql
    assert "id" in sql
    assert "title" in sql
    assert "content" in sql