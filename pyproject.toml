# SPDX-FileCopyrightText: 2024-present Richard Dahl <richard@dahl.us>
#
# SPDX-License-Identifier: MIT

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


# Basic Project Information
[project]
name = "uno"
dynamic = ["version"]
description = 'uno is not an orm'
readme = "README.md"
requires-python = ">=3.12"
license = "MIT"
keywords = []
authors = [{ name = "Richard Dahl", email = "richard@dahl.us" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "alembic",
  "babel",
  "fastapi[standard]",
  "inject",
  "jinja2",
  "PyJWT",
  "psycopg",
  'asyncpg',
  "pydantic[email]",
  "pydantic-settings",
  "python-multipart",
  "pytz",
  "uvicorn",
  "sqlalchemy[asyncio]",
  "sqlalchemy-stubs",
]

[project.urls]
Documentation = "https://github.com/richarddahl/notorm#readme"
Issues = "https://github.com/richarddahl/notorm/issues"
Source = "https://github.com/richarddahl/notorm"

[tool.hatch.version]
path = "src/uno/__about__.py"


# Default Environment
[tool.hatch.envs.default.scripts]
main = "uvicorn main:app {args: --reload}"
createdb = "python src/scripts/createdb.py"
dropdb = "python src/scripts/dropdb.py"
createsuperuser = "python src/scripts/createsuperuser.py"
createquerypaths = "python src/scripts/createquerypaths.py"
vector-demo = "python src/scripts/vector_demo.py {args}"
migrate-init = "python src/scripts/migrations.py init"
migrate-generate = "python src/scripts/migrations.py generate {args}"
migrate-up = "python src/scripts/migrations.py upgrade {args:head}"
migrate-down = "python src/scripts/migrations.py downgrade {args}"
migrate-current = "python src/scripts/migrations.py current"
migrate-history = "python src/scripts/migrations.py history"
migrate-revisions = "python src/scripts/migrations.py revisions"


#Development Environment
[tool.hatch.envs.dev.scripts]
main = "ENV=dev uvicorn main:app {args: --reload}"
createdb = "ENV=dev python src/scripts/createdb.py"
dropdb = "ENV=dev python src/scripts/dropdb.py"
createsuperuser = "ENV=dev python src/scripts/createsuperuser.py"
createquerypaths = "ENV=dev python src/scripts/createquerypaths.py"
vector-demo = "ENV=dev python src/scripts/vector_demo.py {args}"
migrate-init = "ENV=dev python src/scripts/migrations.py init"
migrate-generate = "ENV=dev python src/scripts/migrations.py generate {args}"
migrate-up = "ENV=dev python src/scripts/migrations.py upgrade {args:head}"
migrate-down = "ENV=dev python src/scripts/migrations.py downgrade {args}"
migrate-current = "ENV=dev python src/scripts/migrations.py current"
migrate-history = "ENV=dev python src/scripts/migrations.py history"
migrate-revisions = "ENV=dev python src/scripts/migrations.py revisions"
docker-setup = "./setup_with_docker.sh"
app = ["ENV=dev", "docker-setup", "main"]
vector-demo-setup = ["ENV=dev", "docker-setup", "vector-demo setup"]


# Testing Environment
[tool.hatch.envs.test]
dependencies = [
  "coverage[toml]",
  "pytest",
  "pytest-asyncio>=0.21.1",
  "asyncio",
  "httpx",
  "requests",
  "factory_boy",
  "pytest-mock",
]

[tool.coverage.run]
source_pkgs = ["uno", "tests"]
branch = true
parallel = true
omit = ["src/uno/__about__.py"]

[tool.coverage.paths]
uno = ["src/uno", "*/uno/src/uno"]
tests = ["tests", "*/uno/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]

[tool.hatch.envs.test.scripts]
test = "ENV=test pytest --tb=no --capture=tee-sys --show-capture=all"
testv = "ENV=test pytest --tb=short --capture=tee-sys --show-capture=all"
testvv = "ENV=test pytest -vv --capture=tee-sys --show-capture=all"
testV = "ENV=test pytest --capture=tee-sys --show-capture=all"
test-cov = "ENV=test coverage run -m pytest"
cov-report = ["ENV=test", "- coverage combine", "coverage report"]
cov = ["ENV=test", "test-cov", "cov-report"]
createdb = "ENV=test python src/scripts/createdb.py"
dropdb = "ENV=test python src/scripts/dropdb.py"
migrate-init = "ENV=test python src/scripts/migrations.py init"
migrate-generate = "ENV=test python src/scripts/migrations.py generate {args}"
migrate-up = "ENV=test python src/scripts/migrations.py upgrade {args:head}"
migrate-down = "ENV=test python src/scripts/migrations.py downgrade {args}"
migrate-current = "ENV=test python src/scripts/migrations.py current"
migrate-history = "ENV=test python src/scripts/migrations.py history"
migrate-revisions = "ENV=test python src/scripts/migrations.py revisions"
docker-setup = "./setup_test_docker.sh"
all = ["ENV=test", "docker-setup", "test"]

[tool.pytest.ini_options]
markers = ["asyncio: mark a test as an asyncio test (using pytest-asyncio)"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
pythonpath = ["."]


# Documentation Environement
[tool.hatch.envs.docs]
dependencies = [
  "mkdocs",
  "mkdocs-material",
  "mkdocstrings>=0.15.0",
  "mkdocs-autorefs",
  "mkdocs-material-extensions",
  "mkdocstrings-python",
]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build --clean --strict"
serve = "mkdocs serve --dev-addr localhost:8001"


# Types Environment
[tool.hatch.envs.types]
extra-dependencies = ["mypy>=1.0.0"]

[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/uno tests}"
