# SPDX-FileCopyrightText: 2024-present Richard Dahl <richard@dahl.us>
#
# SPDX-License-Identifier: MIT

from typing import Optional

from sqlalchemy import (
    ForeignKey,
    Index,
    ForeignKey,
    UniqueConstraint,
)
from sqlalchemy.orm import relationship, Mapped, mapped_column
from sqlalchemy.dialects.postgresql import ENUM

from uno.model import UnoModel, PostgresTypes
from uno.authorization.mixins import DefaultModelMixin
from uno.enums import ValueType
from uno.settings import uno_settings


class ReportFieldConfigModel(DefaultModelMixin, UnoModel):
    __tablename__ = "report_field_config"
    __table_args__ = ({"comment": "Configuration of fields in a report"},)

    # Columns
    report_field_id: Mapped[PostgresTypes.String26] = mapped_column(
        ForeignKey("report_field.id", ondelete="CASCADE"),
        doc="The report field",
        info={"edge": "REPORT_FIELD", "reverse_edge": "REPORT_FIELD_CONFIGS"},
    )
    report_type_id: Mapped[PostgresTypes.String26] = mapped_column(
        ForeignKey("report_type.id", ondelete="CASCADE"),
        doc="The report type",
        info={"edge": "REPORT_TYPE", "reverse_edge": "REPORT_FIELD_CONFIGS"},
    )
    parent_field_id: Mapped[Optional[PostgresTypes.String26]] = mapped_column(
        ForeignKey("report_field.id", ondelete="CASCADE"),
        doc="The parent field for this field",
        info={"edge": "PARENT_FIELD", "reverse_edge": "CHILD_FIELDS"},
    )
    is_label_included: Mapped[bool] = mapped_column(
        doc="Whether the label for this field is included in the report",
    )
    field_format: Mapped[Optional[str]] = mapped_column(
        doc="Format for the field in the report",
    )


class ReportFieldModel(DefaultModelMixin, UnoModel):
    __tablename__ = "report_field"
    __table_args__ = (
        UniqueConstraint("tenant_id", "name"),
        Index("ix_report_field_tenant_id_name", "tenant_id", "name"),
        {"comment": "Fields that can be included in reports"},
    )

    # Columns
    field_meta_type: Mapped[PostgresTypes.String255] = mapped_column(
        ForeignKey("meta_type.id", ondelete="CASCADE"),
        doc="The meta_record type of the report field",
        info={"edge": "META_TYPE", "reverse_edge": "REPORT_FIELDS"},
    )
    field_type: Mapped[ValueType] = mapped_column(
        ENUM(
            ValueType,
            name="report_field_type",
            create_type=True,
            schema=uno_settings.DB_SCHEMA,
        ),
        doc="The type of the report field",
    )
    name: Mapped[Optional[PostgresTypes.String255]] = mapped_column(
        doc="The name of the report field."
    )
    explanation: Mapped[str] = mapped_column(
        doc="Explanation of the report field",
    )


class ReportTypeModel(DefaultModelMixin, UnoModel):
    __tablename__ = "report_type"
    __table_args__ = (
        UniqueConstraint("tenant_id", "name"),
        Index("ix_report_type_tenant_id_name", "tenant_id", "name"),
        Index("ix_report_type_meta_type", "meta_type"),
        {"comment": "The types of reports that can be generated"},
    )

    # Columns
    meta_type: Mapped[PostgresTypes.String255] = mapped_column(
        ForeignKey("meta_type.id", ondelete="CASCADE"),
        doc="The meta_record type of the report",
        info={"edge": "META_TYPE", "reverse_edge": "REPORT_TYPES"},
    )
    name: Mapped[PostgresTypes.String128] = mapped_column(
        doc="The name of the report type",
    )
    description: Mapped[str] = mapped_column(
        doc="Description of the report type",
    )


class ReportModel(DefaultModelMixin, UnoModel):
    __tablename__ = "report"
    __table_args__ = ({"comment": "Reports generated by the system"},)

    # Columns
    name: Mapped[PostgresTypes.String255] = mapped_column(
        doc="Name of the report",
    )
    report_type: Mapped[PostgresTypes.String26] = mapped_column(
        ForeignKey("report_type.id", ondelete="CASCADE"),
        doc="The type of the report",
        info={"edge": "REPORT_TYPE", "reverse_edge": "REPORTS"},
    )
    data: Mapped[PostgresTypes.ByteA] = mapped_column(
        doc="Data for the report",
    )
    data_hash: Mapped[PostgresTypes.String64] = mapped_column(
        doc="Hash of the data for the report",
    )
