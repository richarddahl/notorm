# SPDX-FileCopyrightText: 2024-present Richard Dahl <richard@dahl.us>
#
# SPDX-License-Identifier: MIT

# Models are the Business Logic Layer Objects

from typing import ClassVar, Any
from pydantic import BaseModel, ConfigDict

from uno.model.schema import UnoSchemaConfig, UnoSchema
from uno.errors import UnoRegistryError
from uno.utilities import convert_snake_to_title
from uno.config import settings


class UnoModel(BaseModel):
    """
    UnoModel serves as the base class for model objects in the Uno framework. It provides a standardized
    mechanism for registering model subclasses, setting up display names derived from their associated
    table names, and initializing schemas based on provided configurations.

    Class Attributes:
        model_config (ConfigDict): Configuration for model behavior, ensuring attributes are populated by name.
        registry (dict[str, UnoModel]): A class-level dictionary mapping model class names to their respective class objects.
        table_name (str): The database table name associated with the model.
        display_name (str): A human-friendly name for the model, typically generated from the table name.
        display_name_plural (str): The plural form of the display name, typically generated by appending an "s" to the title.
        schema_configs (dict[str, UnoSchemaConfig]): A mapping of schema names to their configuration objects, used to set up various schemas.
        view_schema (UnoSchema): Schema used for read-only views of the model.
        edit_schema (UnoSchema): Schema used when editing instances of the model.
        summary_schema (UnoSchema): Schema used for producing summarized representations of the model.

    Methods:
        __init_subclass__(**kwargs):
            Automatically invoked when a new subclass is created. This method:
              - Registers the subclass in the registry if it doesn't already exist.
              - Raises an UnoRegistryError if a duplicate model name is detected.
              - Calls set_display_names() to initialize default display names.

        configure():
            A class method that generally triggers the setup of schemas by calling set_schemas().

        set_display_names():
            A class method that sets the display_name and display_name_plural attributes. If these attributes
            are not explicitly provided, they are derived from the table_name using a conversion function that
            transforms snake_case to title case.

        set_schemas():
            A class method that iterates through all defined schema configurations in schema_configs. For each
            schema configuration:
              - It creates the corresponding schema using the configuration's create_schema() method.
              - It sets the resulting schema as an attribute of the class.

    Exceptions:
        UnoRegistryError:
            Raised during subclass initialization if a model class with the same name already exists in the registry.

    Usage:
        Subclass UnoModel to define new models. During class creation, each subclass will automatically be
        registered, have its display names set, and have its schemas configured based on the provided schema_configs.
    """

    model_config = ConfigDict(populate_by_name=True)

    registry: ClassVar[dict[str, "UnoModel"]] = {}
    table_name: ClassVar[str] = None
    display_name: ClassVar[str] = None
    display_name_plural: ClassVar[str] = None
    schema_configs: ClassVar[dict[str, "UnoSchemaConfig"]] = {}
    view_schema: ClassVar[UnoSchema] = None
    edit_schema: ClassVar[UnoSchema] = None
    summary_schema: ClassVar[UnoSchema] = None

    def __init_subclass__(cls, **kwargs) -> None:
        """
        Initialize a subclass of UnoModel and register it.

        This method is automatically invoked when a new subclass of UnoModel is defined.
        It ensures that the UnoModel class itself is not added to the registry and that
        no duplicate subclass names are registered.

        The method performs the following steps:
        - Calls the superclass __init_subclass__ to perform any initialization from the parent.
        - Skips registration if the class being initialized is UnoModel itself.
        - Checks if the subclass name is not already present in the registry:
            - If not, it updates the registry by adding the new subclass with its name as the key.
            - If the name is already present, it raises an UnoRegistryError to prevent duplicate registrations.
        - Calls set_display_names() to configure the display names for the subclass.

        Raises:
            UnoRegistryError: If a subclass with the same name already exists in the registry.
        """
        super().__init_subclass__(**kwargs)
        # Don't add the UnoModel class itself to the registry
        if cls is UnoModel:
            return
        # Add the subclass to the registry if it is not already there
        if cls.__name__ not in cls.registry:
            cls.registry.update({cls.__name__: cls})
        else:
            raise UnoRegistryError(
                f"A Model class with the name {cls.__name__} already exists in the registry.",
                "MODEL_CLASS_EXISTS_IN_REGISTRY",
            )
        cls.set_display_names()

    @classmethod
    def configure(cls) -> None:
        """Configure the UnoModel class"""
        cls.set_schemas()

    # End of __init_subclass__

    @classmethod
    def set_display_names(cls) -> None:
        """
        Set the display names for the class based on its table name.

        This method assigns default values for the class attributes 'display_name' and
        'display_name_plural' if they are not already set. The default value is generated
        by converting the snake_case 'table_name' to a title case string using the function
        'convert_snake_to_title'. 'display_name_plural' is then formed by appending an "s" to
        this converted title.

        Returns:
            None
        """
        cls.display_name = (
            convert_snake_to_title(cls.table_name)
            if cls.display_name is None
            else cls.display_name
        )
        cls.display_name_plural = (
            f"{convert_snake_to_title(cls.table_name)}s"
            if cls.display_name_plural is None
            else cls.display_name_plural
        )

    @classmethod
    def set_schemas(cls) -> None:
        """
        Set the schemas for the UnoModel class.

        This method iterates over each key-value pair in the class-level `schema_configs` dictionary.
        For each schema configuration:
            - It calls the `create_schema` method on the configuration with the given schema name and the current class.
            - It assigns the resulting schema to the class attribute corresponding to the schema name.

        Returns:
            None
        """
        """Set the schemas for the UnoModel class"""
        for schema_name, schema_config in cls.schema_configs.items():
            setattr(
                cls,
                schema_name,
                schema_config.create_schema(
                    schema_name=schema_name,
                    model=cls,
                ),
            )
