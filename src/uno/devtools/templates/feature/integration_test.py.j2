"""
Integration tests for {{ feature_name|pascal_case }} API.
"""

import pytest
from httpx import AsyncClient
from fastapi import status
from uuid import UUID

from {{ project_name }}.main import app


@pytest.mark.asyncio
class Test{{ feature_name|pascal_case }}API:
    """Integration tests for {{ feature_name|pascal_case }} API endpoints."""
    
    @pytest.fixture
    async def client(self):
        """Create an async test client."""
        async with AsyncClient(app=app, base_url="http://test") as client:
            yield client
    
    @pytest.fixture
    async def test_{{ feature_name|snake_case }}(self, client):
        """Create a test {{ feature_name|snake_case }} for testing."""
        # Create a test entity
        response = await client.post(
            "/api/{{ feature_name|snake_case }}s",
            json={
                "name": "Test {{ feature_name|pascal_case }}",
                "description": "Test description for integration tests",
            },
        )
        
        assert response.status_code == status.HTTP_201_CREATED
        data = response.json()
        return data
    
    async def test_create_{{ feature_name|snake_case }}(self, client):
        """Test creating a {{ feature_name|snake_case }}."""
        response = await client.post(
            "/api/{{ feature_name|snake_case }}s",
            json={
                "name": "New {{ feature_name|pascal_case }}",
                "description": "New description",
            },
        )
        
        assert response.status_code == status.HTTP_201_CREATED
        data = response.json()
        assert data["name"] == "New {{ feature_name|pascal_case }}"
        assert data["description"] == "New description"
        assert "id" in data
    
    async def test_get_{{ feature_name|snake_case }}(self, client, test_{{ feature_name|snake_case }}):
        """Test getting a {{ feature_name|snake_case }} by ID."""
        {{ feature_name|snake_case }}_id = test_{{ feature_name|snake_case }}["id"]
        
        response = await client.get(f"/api/{{ feature_name|snake_case }}s/{{{ feature_name|snake_case }}_id}")
        
        assert response.status_code == status.HTTP_200_OK
        data = response.json()
        assert data["id"] == {{ feature_name|snake_case }}_id
        assert data["name"] == test_{{ feature_name|snake_case }}["name"]
        assert data["description"] == test_{{ feature_name|snake_case }}["description"]
    
    async def test_get_{{ feature_name|snake_case }}_not_found(self, client):
        """Test getting a non-existent {{ feature_name|snake_case }}."""
        # Generate a random UUID that shouldn't exist
        non_existent_id = "00000000-0000-0000-0000-000000000000"
        
        response = await client.get(f"/api/{{ feature_name|snake_case }}s/{non_existent_id}")
        
        assert response.status_code == status.HTTP_404_NOT_FOUND
    
    async def test_list_{{ feature_name|snake_case }}s(self, client, test_{{ feature_name|snake_case }}):
        """Test listing {{ feature_name|snake_case }}s."""
        response = await client.get("/api/{{ feature_name|snake_case }}s")
        
        assert response.status_code == status.HTTP_200_OK
        data = response.json()
        assert "items" in data
        assert "total" in data
        assert data["total"] >= 1
        
        # Find our test entity in the list
        found = False
        for item in data["items"]:
            if item["id"] == test_{{ feature_name|snake_case }}["id"]:
                found = True
                break
        
        assert found, f"Test {{ feature_name|snake_case }} not found in list response"
    
    async def test_update_{{ feature_name|snake_case }}(self, client, test_{{ feature_name|snake_case }}):
        """Test updating a {{ feature_name|snake_case }}."""
        {{ feature_name|snake_case }}_id = test_{{ feature_name|snake_case }}["id"]
        
        response = await client.patch(
            f"/api/{{ feature_name|snake_case }}s/{{{ feature_name|snake_case }}_id}",
            json={
                "name": "Updated {{ feature_name|pascal_case }}",
            },
        )
        
        assert response.status_code == status.HTTP_200_OK
        data = response.json()
        assert data["id"] == {{ feature_name|snake_case }}_id
        assert data["name"] == "Updated {{ feature_name|pascal_case }}"
        assert data["description"] == test_{{ feature_name|snake_case }}["description"]
    
    async def test_update_{{ feature_name|snake_case }}_not_found(self, client):
        """Test updating a non-existent {{ feature_name|snake_case }}."""
        # Generate a random UUID that shouldn't exist
        non_existent_id = "00000000-0000-0000-0000-000000000000"
        
        response = await client.patch(
            f"/api/{{ feature_name|snake_case }}s/{non_existent_id}",
            json={
                "name": "Updated {{ feature_name|pascal_case }}",
            },
        )
        
        assert response.status_code == status.HTTP_404_NOT_FOUND
    
    async def test_delete_{{ feature_name|snake_case }}(self, client, test_{{ feature_name|snake_case }}):
        """Test deleting a {{ feature_name|snake_case }}."""
        {{ feature_name|snake_case }}_id = test_{{ feature_name|snake_case }}["id"]
        
        response = await client.delete(f"/api/{{ feature_name|snake_case }}s/{{{ feature_name|snake_case }}_id}")
        
        assert response.status_code == status.HTTP_204_NO_CONTENT
        
        # Verify it's gone
        get_response = await client.get(f"/api/{{ feature_name|snake_case }}s/{{{ feature_name|snake_case }}_id}")
        assert get_response.status_code == status.HTTP_404_NOT_FOUND
    
    async def test_delete_{{ feature_name|snake_case }}_not_found(self, client):
        """Test deleting a non-existent {{ feature_name|snake_case }}."""
        # Generate a random UUID that shouldn't exist
        non_existent_id = "00000000-0000-0000-0000-000000000000"
        
        response = await client.delete(f"/api/{{ feature_name|snake_case }}s/{non_existent_id}")
        
        assert response.status_code == status.HTTP_404_NOT_FOUND