# {{ project_name|pascal_case }}

A modern web application built with Uno framework.

## Features

- Modern, async-first architecture
- Domain-driven design principles
- Modular and maintainable codebase
- Comprehensive test suite
- Type-safe interactions

## Getting Started

### Prerequisites

- Python 3.9+
- Docker and Docker Compose (for development database)
{% if database == "postgresql" %}
- PostgreSQL 14+ (for production)
{% endif %}

### Installation

1. Clone the repository

```bash
git clone https://github.com/yourusername/{{ project_name }}.git
cd {{ project_name }}
```

2. Create a virtual environment

```bash
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

3. Install dependencies

```bash
pip install -e ".[dev]"
```

4. Create a .env file

```bash
cp .env.example .env
# Edit .env with your configuration
```

5. Start the development database

```bash
docker-compose up -d
```

6. Run database migrations

```bash
alembic upgrade head
```

7. Start the development server

```bash
uvicorn {{ project_name }}.main:app --reload
```

## Development

### Project Structure

```
{{ project_name }}/
├── src/
│   └── {{ project_name }}/
│       ├── api/            # API endpoints and routers
│       ├── core/           # Core functionality and configuration
│       ├── domain/         # Domain model and business logic
│       └── infrastructure/ # External systems integration
├── tests/
│   ├── unit/               # Unit tests
│   └── integration/        # Integration tests
└── docs/                   # Documentation
```

### Running Tests

```bash
pytest
```

With coverage:

```bash
pytest --cov={{ project_name }}
```

### Code Style

This project uses black and isort for code formatting:

```bash
black .
isort .
```

### Type Checking

```bash
mypy .
```

## Deployment

### Docker

Build the Docker image:

```bash
docker build -t {{ project_name }} .
```

Run the container:

```bash
docker run -p 8000:8000 --env-file .env {{ project_name }}
```

## License

MIT