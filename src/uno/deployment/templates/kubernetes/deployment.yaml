# Kubernetes deployment template for Uno applications
# This template provides a basic Kubernetes deployment for Uno applications

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ app_name }}
  namespace: {{ namespace }}
  labels:
    app: {{ app_name }}
    environment: {{ environment }}
spec:
  replicas: {{ replicas }}
  selector:
    matchLabels:
      app: {{ app_name }}
  strategy:
    type: {{ strategy_type }}  # RollingUpdate or Recreate
    {% if strategy_type == "RollingUpdate" %}
    rollingUpdate:
      maxSurge: {{ max_surge }}
      maxUnavailable: {{ max_unavailable }}
    {% endif %}
  template:
    metadata:
      labels:
        app: {{ app_name }}
        environment: {{ environment }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "8000"
    spec:
      containers:
        - name: {{ app_name }}
          image: {{ image_repo }}/{{ app_name }}:{{ image_tag }}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8000
              name: http
          env:
            - name: ENV
              value: {{ environment }}
            - name: DB_HOST
              value: {{ db_host }}
            - name: DB_PORT
              value: "{{ db_port }}"
            - name: DB_NAME
              value: {{ db_name }}
            - name: DB_USER
              value: {{ db_user }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ app_name }}-secrets
                  key: db-password
          resources:
            requests:
              cpu: {{ cpu_request }}
              memory: {{ memory_request }}
            limits:
              cpu: {{ cpu_limit }}
              memory: {{ memory_limit }}
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /readiness
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          volumeMounts:
            - name: config-volume
              mountPath: /app/config
            - name: tmp-volume
              mountPath: /tmp
      volumes:
        - name: config-volume
          configMap:
            name: {{ app_name }}-config
        - name: tmp-volume
          emptyDir: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
---
apiVersion: v1
kind: Service
metadata:
  name: {{ app_name }}
  namespace: {{ namespace }}
  labels:
    app: {{ app_name }}
    environment: {{ environment }}
spec:
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ app_name }}
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ app_name }}
  namespace: {{ namespace }}
  labels:
    app: {{ app_name }}
    environment: {{ environment }}
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    {% for key, value in ingress_annotations.items() %}
    {{ key }}: "{{ value }}"
    {% endfor %}
spec:
  tls:
    - hosts:
        - {{ domain }}
      secretName: {{ app_name }}-tls
  rules:
    - host: {{ domain }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: {{ app_name }}
                port:
                  name: http
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ app_name }}
  namespace: {{ namespace }}
  labels:
    app: {{ app_name }}
    environment: {{ environment }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ app_name }}
  minReplicas: {{ min_replicas }}
  maxReplicas: {{ max_replicas }}
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: {{ cpu_threshold }}
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: {{ memory_threshold }}
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 100
          periodSeconds: 15
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
        - type: Percent
          value: 100
          periodSeconds: 15