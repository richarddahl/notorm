# GitHub Actions workflow for Uno applications
# This template provides a CI/CD pipeline for Uno applications using GitHub Actions

name: Uno CI/CD Pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - staging
          - production

# Environment variables
env:
  PYTHON_VERSION: '3.12'
  POSTGRES_VERSION: '16'
  APP_NAME: uno-app

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Build and test job
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    # Service containers to run with the job
    services:
      # PostgreSQL service container
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: uno_test
          POSTGRES_PASSWORD: uno_test
          POSTGRES_DB: uno_test_db
        ports:
          - 5432:5432
        # Health check to wait for postgres to start
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"
      
      # Run type checking
      - name: Type check
        run: |
          mypy --install-types --non-interactive src/uno tests
      
      # Run unit tests
      - name: Run unit tests
        run: |
          ENV=test pytest tests/unit/
      
      # Run integration tests
      - name: Run integration tests
        run: |
          ENV=test pytest tests/auth/ tests/meta/ tests/pgjwt/
      
      # Generate test coverage report
      - name: Generate test coverage
        run: |
          ENV=test coverage run -m pytest
          coverage report
          coverage xml
      
      # Upload coverage report
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
  
  # Security scanning job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      # Install security tools
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
      
      # Run bandit security scan
      - name: Run bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-results.json
      
      # Run safety dependency check
      - name: Run safety dependency check
        run: |
          safety check
  
  # Build and push Docker image
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Extract metadata for Docker
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ env.APP_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=short
      
      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  
  # Deploy to environment
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'dev' }}
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      # Install deployment dependencies
      - name: Install deployment dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[deployment]"
      
      # Set up Kubernetes
      - name: Set up Kubernetes
        uses: Azure/setup-kubectl@v3
      
      # Deploy to environment
      - name: Deploy to environment
        run: |
          python -m uno.deployment.scripts.deploy \
            --app-name ${{ env.APP_NAME }} \
            --environment ${{ github.event.inputs.environment || 'dev' }} \
            --image-tag ${{ github.sha }} \
            --config-file ./deployment/${{ github.event.inputs.environment || 'dev' }}.yaml
      
      # Verify deployment
      - name: Verify deployment
        run: |
          python -m uno.deployment.scripts.verify \
            --app-name ${{ env.APP_NAME }} \
            --environment ${{ github.event.inputs.environment || 'dev' }}