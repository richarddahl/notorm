from typing import Protocol, List, Optional, Type, Any
from uno.queries.entities import Query, QueryPath, QueryValue
from uno.core.errors.result import Result

class IQueryPathRepository(Protocol):
    async def find_by_attribute_id(self, attribute_id: str) -> List[QueryPath]: ...
    async def find_by_meta_type_id(self, meta_type_id: str) -> List[QueryPath]: ...
    async def find_by_path_name(self, path_name: str) -> Optional[QueryPath]: ...

class IQueryValueRepository(Protocol):
    async def find_by_query_id(self, query_id: str) -> List[QueryValue]: ...
    async def find_by_query_path_id(self, query_path_id: str) -> List[QueryValue]: ...
    async def delete_for_query(self, query_id: str) -> Result[None]: ...

class IQueryRepository(Protocol):
    async def find_by_name(self, name: str) -> Optional[Query]: ...
    async def find_by_meta_type_id(self, meta_type_id: str) -> List[Query]: ...
    async def find_with_values(self, query_id: str) -> Result[Query]: ...
    async def find_all_with_values(self, meta_type_id: Optional[str] = None) -> Result[List[Query]]: ...

class IQueryPathService(Protocol):
    async def find_by_attribute_id(self, attribute_id: str) -> Result[List[QueryPath]]: ...
    async def find_by_meta_type_id(self, meta_type_id: str) -> Result[List[QueryPath]]: ...
    async def find_by_path_name(self, path_name: str) -> Result[Optional[QueryPath]]: ...
    async def generate_for_model(self, model_class: Type[Any]) -> Result[List[QueryPath]]: ...

class IQueryValueService(Protocol):
    async def find_by_query_id(self, query_id: str) -> Result[List[QueryValue]]: ...
    async def find_by_query_path_id(self, query_path_id: str) -> Result[List[QueryValue]]: ...
    async def delete_for_query(self, query_id: str) -> Result[None]: ...

class IQueryService(Protocol):
    async def find_by_name(self, name: str) -> Result[Optional[Query]]: ...
    # Add other methods as needed from QueryService
