#!/usr/bin/env python3
# SPDX-FileCopyrightText: 2024-present Richard Dahl <richard@dahl.us>
#
# SPDX-License-Identifier: MIT

"""
Notification models and handlers for workflow notifications.

This module provides dedicated models and events for workflow-generated
notifications, enabling seamless integration with the notification system.
"""

from datetime import datetime
from typing import Optional, Dict, Any, List, ClassVar
from enum import Enum

from pydantic import BaseModel, Field

from uno.domain.events import DomainEvent


class NotificationPriority(str, Enum):
    """Priority levels for workflow notifications."""
    LOW = "low"
    NORMAL = "normal"
    HIGH = "high"
    URGENT = "urgent"


class NotificationType(str, Enum):
    """Types of workflow notifications."""
    INFO = "info"
    SUCCESS = "success"
    WARNING = "warning"
    ERROR = "error"


class WorkflowNotification(BaseModel):
    """
    Represents a notification generated by a workflow.
    
    This model defines the structure of notifications that can be
    sent to users through various channels as a result of workflow executions.
    """
    id: str
    title: str
    message: str
    recipient_id: str
    workflow_id: str
    action_id: str
    created_at: datetime = Field(default_factory=datetime.utcnow)
    notification_type: NotificationType = NotificationType.INFO
    priority: NotificationPriority = NotificationPriority.NORMAL
    link: Optional[str] = None
    read: bool = False
    read_at: Optional[datetime] = None
    expires_at: Optional[datetime] = None
    metadata: Dict[str, Any] = Field(default_factory=dict)
    tenant_id: Optional[str] = None
    
    def mark_as_read(self) -> None:
        """Mark the notification as read."""
        self.read = True
        self.read_at = datetime.utcnow()


class WorkflowNotificationEvent(DomainEvent):
    """Base class for workflow notification events."""
    notification: ClassVar[str] = "workflow"


class SystemNotificationCreated(WorkflowNotificationEvent):
    """Event emitted when a new notification is created by a workflow."""
    
    def __init__(
        self,
        notification_id: str,
        recipient_id: str,
        title: str,
        message: str,
        workflow_id: str,
        action_id: str,
        notification_type: str = "info",
        priority: str = "normal",
        link: Optional[str] = None,
        expires_at: Optional[datetime] = None,
        metadata: Optional[Dict[str, Any]] = None,
        tenant_id: Optional[str] = None
    ):
        super().__init__()
        self.notification_id = notification_id
        self.recipient_id = recipient_id
        self.title = title
        self.message = message
        self.notification_type = notification_type
        self.priority = priority
        self.link = link
        self.expires_at = expires_at
        self.metadata = metadata or {}
        self.workflow_id = workflow_id
        self.action_id = action_id
        self.tenant_id = tenant_id
        self.aggregate_id = notification_id
        self.aggregate_type = "notification"


class NotificationRead(WorkflowNotificationEvent):
    """Event emitted when a notification is read."""
    
    def __init__(
        self,
        notification_id: str,
        recipient_id: str,
        read_at: Optional[datetime] = None
    ):
        super().__init__()
        self.notification_id = notification_id
        self.recipient_id = recipient_id
        self.read_at = read_at or datetime.utcnow()
        self.aggregate_id = notification_id
        self.aggregate_type = "notification"


class BatchNotificationsCreated(WorkflowNotificationEvent):
    """
    Event emitted when multiple notifications are created in a batch.
    
    This is useful for optimizing notification delivery when a workflow
    needs to notify many recipients at once.
    """
    
    def __init__(
        self,
        notifications: List[Dict[str, Any]],
        workflow_id: str,
        action_id: str,
        tenant_id: Optional[str] = None
    ):
        super().__init__()
        self.notifications = notifications
        self.count = len(notifications)
        self.workflow_id = workflow_id
        self.action_id = action_id
        self.tenant_id = tenant_id
        self.aggregate_id = workflow_id
        self.aggregate_type = "notification_batch"